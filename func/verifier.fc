;; #pragma version >=0.2.0;
;; #include "stdlib.fc";
;; #include "bn_128.fc";
;;
;;
;; (tuple) verifyingKey() {
;; ;;     tuple alfa1 = unsafe_tuple([20491192805390485299153009773594534940189261866228447918068658471970481763042, 9383485363053290200918347156157836566562967994039712273449902621266178545958]);
;; ;;     tuple beta2 = unsafe_tuple([unsafe_tuple([4252822878758300859123897981450591353533073413197771768651442665752259397132, 6375614351688725206403948262868962793625744043794305715222011528459656738731]), unsafe_tuple([21847035105528745403288232691147584728191162732299865338377159692350059136679, 10505242626370262277552901082094356697409835680220590971873171140371331206856])]);
;; ;;     tuple gamma2 = unsafe_tuple([unsafe_tuple([11559732032986387107991004021392285783925812861821192530917403151452391805634, 10857046999023057135944570762232829481370756359578518086990519993285655852781]), unsafe_tuple([4082367875863433681332203403145435568316851327593401208105741076214120093531, 8495653923123431417604973247489272438418190587263600148770280649306958101930])]);
;; ;;     tuple delta2 = unsafe_tuple([unsafe_tuple([20209888124303918536079705310632775300906175181929226675192649497624145626710, 4903708208921433402725907533529399945980152214386754819454100431418991647571]), unsafe_tuple([7094562479241441230927422451397244135921776388549394641366974209797645682880, 11349032663277236407777029187228630057122519897489705272317599446914412267383])]);
;;     tuple IC = unsafe_tuple([unsafe_tuple([
;;             5327796899256980754149752102780351573549411280479893269734190468803968135901,
;;             10501192856308689835169414785936197282388231419294724097868889971385395402904]),
;;             unsafe_tuple([10815443452722685862719418136930728563375205396448510303137622856139810756858,
;;                     9617915667559247504411005331166561790259537697914970364157403002277440550531]),
;;             unsafe_tuple([6767875009506964589536211226178161046613600984018839996155272494757712968780,
;;                     9027442166671639796582281165524561806172543191005334004069507710480110901864])]);
;;     return (IC);
;; }
;;
;;
;;
;;
;;
;; (int) validate_input(tuple input) {
;;    ;; should be implemented
;;     return 1;
;; }
;;
;; () verify_init (tuple input) impure {
;;     if (validate_input(input) == 0) {
;;         throw(321);
;;     }
;;     (tuple IC) = verifyingKey();
;;     if( length(IC) != 3) {
;;         throw(320);
;;     }
;;     int vk_x_0 = 0;
;;     int vk_x_1 = 0;
;;     int i = 0;
;;     repeat (2) {
;;         (int x_0, int x_1) = multiplyScalar(
;;                 IC.getByIndex(i + 1).getByIndex(0),
;;                 IC.getByIndex(i + 1).getByIndex(1),
;;                 input.getByIndex(i)
;;         );
;;         (vk_x_0, vk_x_1) = add(
;;                 vk_x_0, vk_x_1,
;;                 x_0, x_1
;;         );
;;         i += 1;
;;     }
;;     (vk_x_0, vk_x_1) = add(vk_x_0, vk_x_1, IC.getByIndex(0).getByIndex(0), IC.getByIndex(0).getByIndex(1));
;; ;;     tuple res = unsafe_tuple([18138344308221647424287964095813565751224747130756629131361493799052549127475, 34045552687512985258041985165760452234155046151579498389795670713392374172, 6410049172095511451641043806615698608249127924256880246100002083432416999974, 20740943528405717167941135143690243747781988632173666235556244211838475708583, 2565376391471599937709735598735400385377912685312942361084719488970622876923, 2051878285599965834089787363965603792426821127334395630668673716918672553009, 18631565764615542074981217888097178721880293235937070379920836710237684136590, 15680300123940853522141054120887549135306031452865958741304246113098141750269, 238127872605346049187325716215421364730726691096979204353014541546059426604, 5411829941656440199366484673323285845361830469052613426908764134794625022989, 392367446344854648038051592569381124889981918135517206336229167852016550923, 19343132996582703375022242441946791292796925139418931471940549924674978999925]);
;;     if(vk_x_0 > 10){
;;         throw(0);
;;     }
;;
;;     ;; save vk_x_0, vk_x_1 with key input[1] and timestamp
;;     ;;Pairing.negate(proof.A), proof.B,
;;
;;
;; }
