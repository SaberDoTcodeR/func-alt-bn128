#pragma version >=0.2.0;
#include "stdlib.fc";


const U255_MAX_PLUS_1 = 57896044618658097711785492504343953926634992332820282019728792003956564819968;

const _q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
const _a = 0;
const _b = 3;



int mulmod(int a, int b) inline_ref {
    (_, int r) = muldivmod(a, b, _q);
    return r;
}

int addmod(int a, int b) inline_ref {
    if 0 == b {
        return a;
    }

    b = _q - b;
    if a >= b {
        return a - b;
    }
    return _q - b + a;
}


(int) powmod(int _base, int _exp) inline_ref {
    if _base == 0 {
        return 0;
    }
    if _exp == 0 {
        return 1;
    }

    int r = 1;
    int bit = U255_MAX_PLUS_1;
    while bit {
        r = mulmod(mulmod(r, r), (_exp & bit ? _base : 1));
        r = mulmod(mulmod(r, r), (_exp & (bit / 2) ? _base : 1));
        r = mulmod(mulmod(r, r), (_exp & (bit / 4) ? _base : 1));
        r = mulmod(mulmod(r, r), (_exp & (bit / 8) ? _base : 1));
        bit >>= 4;
    }

    return r;
}


(int, int, int, int, int, int, int, int, int, int, int, int) fq12_add(
        int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11,
        int y0, int y1, int y2, int y3, int y4, int y5, int y6, int y7, int y8, int y9, int y10, int y11
) inline_ref {
    return (
            addmod(x0, y0),
            addmod(x1, y1),
            addmod(x2, y2),
            addmod(x3, y3),
            addmod(x4, y4),
            addmod(x5, y5),
            addmod(x6, y6),
            addmod(x7, y7),
            addmod(x8, y8),
            addmod(x9, y9),
            addmod(x10, y10),
            addmod(x11, y11)
    );

}

(tuple) fq12_add_tuple(
        tuple x, tuple y
) inline_ref {
    return unsafe_tuple([
            addmod(x.getByIndex(0), y.getByIndex(0)),
            addmod(x.getByIndex(1), y.getByIndex(1)),
            addmod(x.getByIndex(2), y.getByIndex(2)),
            addmod(x.getByIndex(3), y.getByIndex(3)),
            addmod(x.getByIndex(4), y.getByIndex(4)),
            addmod(x.getByIndex(5), y.getByIndex(5)),
            addmod(x.getByIndex(6), y.getByIndex(6)),
            addmod(x.getByIndex(7), y.getByIndex(7)),
            addmod(x.getByIndex(8), y.getByIndex(8)),
            addmod(x.getByIndex(9), y.getByIndex(9)),
            addmod(x.getByIndex(10), y.getByIndex(10)),
            addmod(x.getByIndex(11), y.getByIndex(11))
    ]);
}

(tuple) fq12_sub_tuple(
        tuple x, tuple y
) inline_ref {
    return unsafe_tuple([
            addmod(x.getByIndex(0), _q - y.getByIndex(0)),
            addmod(x.getByIndex(1), _q - y.getByIndex(1)),
            addmod(x.getByIndex(2), _q - y.getByIndex(2)),
            addmod(x.getByIndex(3), _q - y.getByIndex(3)),
            addmod(x.getByIndex(4), _q - y.getByIndex(4)),
            addmod(x.getByIndex(5), _q - y.getByIndex(5)),
            addmod(x.getByIndex(6), _q - y.getByIndex(6)),
            addmod(x.getByIndex(7), _q - y.getByIndex(7)),
            addmod(x.getByIndex(8), _q - y.getByIndex(8)),
            addmod(x.getByIndex(9), _q - y.getByIndex(9)),
            addmod(x.getByIndex(10), _q - y.getByIndex(10)),
            addmod(x.getByIndex(11), _q - y.getByIndex(11))
    ]);
}

(int, int, int, int, int, int, int, int, int, int, int, int) fq12_sub(
        int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11,
        int y0, int y1, int y2, int y3, int y4, int y5, int y6, int y7, int y8, int y9, int y10, int y11
) inline_ref {
    return (
            addmod(x0, _q - y0),
            addmod(x1, _q - y1),
            addmod(x2, _q - y2),
            addmod(x3, _q - y3),
            addmod(x4, _q - y4),
            addmod(x5, _q - y5),
            addmod(x6, _q - y6),
            addmod(x7, _q - y7),
            addmod(x8, _q - y8),
            addmod(x9, _q - y9),
            addmod(x10, _q - y10),
            addmod(x11, _q - y11)
    );

}

(int, int, int, int, int, int, int, int, int, int, int, int) fq12_mul_coef(
        int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11,
        int coef) inline_ref {
    return (
            mulmod(x0, coef),
            mulmod(x1, coef),
            mulmod(x2, coef),
            mulmod(x3, coef),
            mulmod(x4, coef),
            mulmod(x5, coef),
            mulmod(x6, coef),
            mulmod(x7, coef),
            mulmod(x8, coef),
            mulmod(x9, coef),
            mulmod(x10, coef),
            mulmod(x11, coef)
    );
}

(tuple) fq12_mul_coef_tuple(
        tuple x, int factor
) inline_ref {
    return unsafe_tuple([
            mulmod(x.getByIndex(0), factor),
            mulmod(x.getByIndex(1), factor),
            mulmod(x.getByIndex(2), factor),
            mulmod(x.getByIndex(3), factor),
            mulmod(x.getByIndex(4), factor),
            mulmod(x.getByIndex(5), factor),
            mulmod(x.getByIndex(6), factor),
            mulmod(x.getByIndex(7), factor),
            mulmod(x.getByIndex(8), factor),
            mulmod(x.getByIndex(9), factor),
            mulmod(x.getByIndex(10), factor),
            mulmod(x.getByIndex(11), factor)
    ]);
}

(int) fq12_eq(
        int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11,
        int y0, int y1, int y2, int y3, int y4, int y5, int y6, int y7, int y8, int y9, int y10, int y11
) inline_ref {
    return (
            (x0 == y0) &
                    (x1 == y1) &
                    (x2 == y2) &
                    (x3 == y3) &
                    (x4 == y4) &
                    (x5 == y5) &
                    (x6 == y6) &
                    (x7 == y7) &
                    (x8 == y8) &
                    (x9 == y9) &
                    (x10 == y10) &
                    (x11 == y11)
    );
}

(int) fq12_eq_tuple(
        tuple x,
        tuple y
) inline_ref {
    int i = 0;
    int ret_val = 1;
    repeat (12) {
        if x.getByIndex(i) != y.getByIndex(i) {
            ret_val = 0;
        }
        i += 1;
    }
    return ret_val;
}

(int) fq12_deg(cell p) inline_ref {
    int key = -1;
    int last_deg = 0;
    do {
        (key, slice p_d, int f) = p~udict::delete_get_max(32);
        if (f) {
            if ((p_d~load_int(257) != 0) & (last_deg == 0)) {

                last_deg = key;
            }

        }
    } until (~ f);

    return last_deg;
}


(int) inverse (int num) inline_ref {
    int t = 0;
    int newT = 1;
    int r = _q;
    int newR = num;
    int q = 0;

    while (newR != 0) {
        q = r / newR;
        (t, newT) = (newT, addmod(t, (_q - mulmod(q, newT))));
        (r, newR) = (newR, addmod(r, -1 * q * newR));
    }

    return t;
}


cell poly_rounded_div(cell a, cell b) inline_ref {
    int dega = fq12_deg(a);
    int degb = fq12_deg(b);
    cell temp = a;
    cell o = new_dict();
    int i = 0;

    repeat (12) {
        o = o.udict_set(32, i, begin_cell().store_int(0, 257).end_cell().begin_parse());
        i = i + 1;
    }
    i = dega - degb;
    repeat (dega - degb + 1) {
        (slice b_degb, _) = b.udict_get?(32, degb);
        (slice temp_degb_i, _) = temp.udict_get?(32, degb + i);
        (slice o_i, _) = o.udict_get?(32, i);
        int b_degb_inv = inverse(b_degb~load_int(257));
        int o_i_new = mulmod(temp_degb_i~load_int(257), b_degb_inv);
        o = o.udict_set(32, i, begin_cell().store_int(addmod(o_i~load_int(257), o_i_new), 257).end_cell().begin_parse());
        int c = 0;
        repeat (degb + 1) {
            (slice temp_c_i, _) = temp.udict_get?(32, c + i);
            (slice o_c, _) = o.udict_get?(32, c);
            temp = temp.udict_set(32, c + i, begin_cell().store_int(addmod(temp_c_i~load_int(257), _q - o_c~load_int(257)), 257).end_cell().begin_parse());
            c = c + 1;
        }
        i = i - 1;
    }
    int deg_o = fq12_deg(o);
    cell res = new_dict();
    i = 0;
    repeat (deg_o + 1) {
        (slice o_i, _) = o.udict_get?(32, i);
        res = res.udict_set(32, i, begin_cell().store_int(o_i~load_int(257), 257).end_cell().begin_parse());
        i = i + 1;
    }
    return res;

}

int len_array(cell x) inline_ref {
    int key = -1;
    int len = 0;
    do {
        (key, slice data, int found) = x.udict_get_next?(32, key);
        if (found) {
            len = len + 1;
        }
    } until (~ found);

    return len;
}

(tuple) fq12_inv(tuple x) inline_ref {
    cell lm = new_dict();
    cell hm = new_dict();
    int i = 0;
    lm = lm.udict_set(32, i, begin_cell().store_int(1, 257).end_cell().begin_parse());
    hm = hm.udict_set(32, i, begin_cell().store_int(0, 257).end_cell().begin_parse());
    i = i + 1;
    repeat (12) {
        lm = lm.udict_set(32, i, begin_cell().store_int(0, 257).end_cell().begin_parse());
        hm = hm.udict_set(32, i, begin_cell().store_int(0, 257).end_cell().begin_parse());
        i = i + 1;
    }
    cell low = new_dict();
    cell high = new_dict();
    i = 0;
    repeat (12) {
        int x_i = x.getByIndex(i);
        low = low.udict_set(32, i, begin_cell().store_int(x_i, 257).end_cell().begin_parse());
        if(i == 0) {
            high = high.udict_set(32, i, begin_cell().store_int(82, 257).end_cell().begin_parse());
        } else {
            if(i == 6) {
                high = high.udict_set(32, i, begin_cell().store_int(-18, 257).end_cell().begin_parse());
            } else {
                high = high.udict_set(32, i, begin_cell().store_int(0, 257).end_cell().begin_parse());
            }
        }
        i = i + 1;
    }

    low = low.udict_set(32, i, begin_cell().store_int(0, 257).end_cell().begin_parse());
    high = high.udict_set(32, i, begin_cell().store_int(1, 257).end_cell().begin_parse());

    while (fq12_deg(low)) {

        cell r = poly_rounded_div(high, low);

        int len_r = len_array(r);

        repeat (13 - len_r) {
            r = r.udict_set(32, len_r, begin_cell().store_int(0, 257).end_cell().begin_parse());
            len_r = len_r + 1;
        }

        int len_hm = len_array(hm);
        cell nm = new_dict();
        i = 0;
        repeat (len_hm) {
            (slice hm_i, _) = hm.udict_get?(32, i);

            nm = nm.udict_set(32, i, begin_cell().store_int(hm_i~load_int(257), 257).end_cell().begin_parse());
            i = i + 1;

        }

        i = 0;

        int len_high = len_array(high);
        cell new = new_dict();
        repeat (len_high) {
            (slice high_i, _) = high.udict_get?(32, i);
            new = new.udict_set(32, i, begin_cell().store_int(high_i~load_int(257), 257).end_cell().begin_parse());
            i = i + 1;
        }

        i = 0;
        repeat (13) {
            int j = 0;
            repeat (13 - i) {

                (slice r_j, _) = r.udict_get?(32, j);
                (slice nm_i_j, _) = nm.udict_get?(32, i + j);
                (slice new_i_j, _) = new.udict_get?(32, i + j);
                (slice lm_i, _) = lm.udict_get?(32, i);
                (slice low_i, _) = low.udict_get?(32, i);
                int r_j_int = r_j~load_int(257);
                nm = nm.udict_set(32, i + j, begin_cell().store_int(addmod(nm_i_j~load_int(257), _q - mulmod(lm_i~load_int(257), r_j_int)), 257).end_cell().begin_parse());

                new = new.udict_set(32, i + j, begin_cell().store_int(addmod(new_i_j~load_int(257), _q - mulmod(low_i~load_int(257), r_j_int)), 257).end_cell().begin_parse());

                j = j + 1;

            }

            i = i + 1;
        }


        (lm, low, hm, high) = (nm, new, lm, low);
    }


    ;;     return self.__class__(lm[:self.degree]) / low[0]
    (slice low_0, _) = low.udict_get?(32, 0);
    int inv = inverse(low_0~load_int(257));
    int len_lm = len_array(lm);
    cell res = new_dict();
    i = 0;
    repeat (12) {
        (slice lm_i, _) = lm.udict_get?(32, i);
        res = res.udict_set(32, i, begin_cell().store_int(mulmod(lm_i~load_int(257), inv), 257).end_cell().begin_parse());
        i = i + 1;
    }
    i = 0;
    tuple res_tuple = empty_tuple();
    repeat (12) {
        (slice res_i, _) = res.udict_get?(32, i);
        res_tuple~tpush(res_i~load_int(257));
        i = i + 1;
    }
    return res_tuple;
}


(tuple) fq12_inv_tuple(tuple x) inline_ref {
    return fq12_inv(x);
}

(int, int, int, int, int, int, int, int, int, int, int, int) fq12_mul(
        int x0, int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11
        , int y0, int y1, int y2, int y3, int y4, int y5, int y6, int y7, int y8, int y9, int y10, int y11
) inline_ref {
    tuple x = unsafe_tuple([x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11]);
    tuple y = unsafe_tuple([y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11]);

    ;; fill b with 23 0s
    cell b = new_dict();
    int i = 0;
    repeat (23) {
        b~udict_set(32, i, begin_cell().store_int(0, 257).end_cell().begin_parse());
        i += 1;
    }

    i = 0;
    repeat (12) {
        int j = 0;
        repeat (12) {
            (slice val, _) = b.udict_get?(32, i + j);
            int number = val~load_int(257);
            int x_number = x.getByIndex(i);
            int y_number = y.getByIndex(j);
            b~udict_set(32, i + j, begin_cell().store_int(addmod(number, mulmod(x_number, y_number)), 257).end_cell().begin_parse());
            j += 1;
        }

        i += 1;
    }
    i = 0;

    int counter = 23;
    while (counter > 12) {
        (_, slice top, _) = b~udict::delete_get_max(32);
        int top_number = top~load_int(257);
        int exp = counter - 13;
        counter -= 1;

        int i = 0;
        repeat (12) {
            (slice val, _) = b.udict_get?(32, i + exp);
            int number = val~load_int(257);
            int modulus_coeffs = 0;
            if (i == 0) {
                modulus_coeffs = 82;
            }
            if (i == 6) {
                modulus_coeffs = -18;
            }
            b~udict_set(32, i + exp, begin_cell().store_int(addmod(number, _q - mulmod(top_number, modulus_coeffs)), 257).end_cell().begin_parse());
            i += 1;
        }
    }
    tuple res_tuple = empty_tuple();
    i = 0;
    repeat (12) {
        (slice res_i, _) = b.udict_get?(32, i);
        res_tuple~tpush(res_i~load_int(257));
        i += 1;
    }
    return (res_tuple.getByIndex(0), res_tuple.getByIndex(1), res_tuple.getByIndex(2), res_tuple.getByIndex(3), res_tuple.getByIndex(4), res_tuple.getByIndex(5), res_tuple.getByIndex(6), res_tuple.getByIndex(7), res_tuple.getByIndex(8), res_tuple.getByIndex(9), res_tuple.getByIndex(10), res_tuple.getByIndex(11));

}

(tuple) fq12_mul_tuple(
        tuple x
        , tuple y
) inline_ref {
    (int z0, int z1, int z2, int z3, int z4, int z5, int z6, int z7, int z8, int z9, int z10, int z11) = fq12_mul(
            x.getByIndex(0), x.getByIndex(1), x.getByIndex(2), x.getByIndex(3), x.getByIndex(4), x.getByIndex(5), x.getByIndex(6), x.getByIndex(7), x.getByIndex(8), x.getByIndex(9), x.getByIndex(10), x.getByIndex(11)
                    , y.getByIndex(0), y.getByIndex(1), y.getByIndex(2), y.getByIndex(3), y.getByIndex(4), y.getByIndex(5), y.getByIndex(6), y.getByIndex(7), y.getByIndex(8), y.getByIndex(9), y.getByIndex(10), y.getByIndex(11)
    );

    return unsafe_tuple([z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11]);

}

(tuple) fq12_exp(tuple x, int exp) inline_ref {
    if exp == 0 {
        return unsafe_tuple([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    }
    if exp == 1 {
        return x;
    }
    if exp % 2 == 0 {
        return fq12_exp(fq12_mul_tuple(x, x), exp / 2);
    }
    return fq12_mul_tuple(fq12_exp(fq12_mul_tuple(x, x), exp / 2), x);
}

(cell, cell) cast_point_to_fq12(tuple pt) inline_ref {
    cell x = new_dict();
    cell y = new_dict();
    int x_val = first(pt);
    int y_val = second(pt);
    x~udict_set(32, 0, begin_cell().store_int(x_val, 257).end_cell().begin_parse());
    y~udict_set(32, 0, begin_cell().store_int(y_val, 257).end_cell().begin_parse());
    int i = 1;
    repeat (11) {
        x~udict_set(32, i, begin_cell().store_int(0, 257).end_cell().begin_parse());
        y~udict_set(32, i, begin_cell().store_int(0, 257).end_cell().begin_parse());
        i += 1;
    }
    return (x, y);
}


(tuple) linefunc( tuple P1_x, tuple P1_y, tuple P2_x, tuple P2_y, tuple T_x, tuple T_y) inline_ref {
    if (fq12_eq_tuple(P1_x, P2_x) == 0) {
        tuple m = fq12_mul_tuple(fq12_sub_tuple(P2_y, P1_y), fq12_inv_tuple(fq12_sub_tuple(P2_x, P1_x)));
        return fq12_sub_tuple(fq12_mul_tuple(m, fq12_sub_tuple(T_x, P1_x)), fq12_sub_tuple(T_y, P1_y));
    }
    if (fq12_eq_tuple(P1_y, P2_y) == 1) {
        tuple m = fq12_mul_tuple(fq12_mul_coef_tuple(fq12_mul_tuple(P1_x, P1_x), 3), fq12_inv_tuple(fq12_mul_coef_tuple(P1_y, 2)));
        return fq12_sub_tuple(fq12_mul_tuple(m, fq12_sub_tuple(T_x, P1_x)), fq12_sub_tuple(T_y, P1_y));
    }
    return fq12_sub_tuple(T_x, P1_x);
}

(tuple, tuple) double(tuple x, tuple y) inline_ref {
    tuple m = fq12_mul_tuple(fq12_mul_coef_tuple(fq12_mul_tuple(x, x), 3), fq12_inv_tuple(fq12_mul_coef_tuple(y, 2)));
    tuple new_x = fq12_sub_tuple(fq12_mul_tuple(m, m), fq12_mul_coef_tuple(x, 2));
    return (new_x, fq12_sub_tuple(fq12_sub_tuple(fq12_mul_tuple(m, x), fq12_mul_tuple(m, new_x)), y));
}

(tuple, tuple) addition(tuple x1, tuple y1, tuple x2, tuple y2) inline_ref {

    if ((fq12_eq_tuple(x2, x1) == 1) & (fq12_eq_tuple(y2, y1) == 1)) {
        return double(x1, y1);
    }
    tuple m = fq12_mul_tuple(fq12_sub_tuple(y2, y1), fq12_inv_tuple(fq12_sub_tuple(x2, x1)));
    tuple new_x = fq12_sub_tuple(fq12_sub_tuple(fq12_mul_tuple(m, m), x1), x2);
    return (new_x, fq12_sub_tuple(fq12_sub_tuple(fq12_mul_tuple(m, x1), fq12_mul_tuple(m, new_x)), y1));
}

(slice) get_last_exponent() inline_ref {
    var ds = get_data().begin_parse();
    return ds;
}

(tuple) calc_expo(tuple f, slice exp) inline_ref {
    tuple res = unsafe_tuple([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    int refs_size = exp.slice_refs();
    slice data = exp~load_bits(exp.slice_bits());
    int i = 0;
    repeat (refs_size + 1) {
        int size = data.slice_bits();
        repeat (size) {
            int bit = data~load_uint(1);
            res = fq12_mul_tuple(res, res);
            if (bit == 1) {
                res = fq12_mul_tuple(res, f);
            }
        }
        i += 1;
        if( i <= refs_size) {
            cell new = exp~load_ref();
            data = new.begin_parse();
        }


    }
    return res;


}

(tuple) miller_loop(tuple Q_x, tuple Q_y, tuple P_x, tuple P_y) impure inline_ref  {
    tuple R_x = unsafe_tuple(
            [
                    Q_x.getByIndex(0), Q_x.getByIndex(1), Q_x.getByIndex(2), Q_x.getByIndex(3), Q_x.getByIndex(4),
                    Q_x.getByIndex(5), Q_x.getByIndex(6), Q_x.getByIndex(7), Q_x.getByIndex(8), Q_x.getByIndex(9),
                    Q_x.getByIndex(10), Q_x.getByIndex(11)
            ]
    );
    tuple R_y = unsafe_tuple(
            [
                    Q_y.getByIndex(0), Q_y.getByIndex(1), Q_y.getByIndex(2), Q_y.getByIndex(3), Q_y.getByIndex(4),
                    Q_y.getByIndex(5), Q_y.getByIndex(6), Q_y.getByIndex(7), Q_y.getByIndex(8), Q_y.getByIndex(9),
                    Q_y.getByIndex(10), Q_y.getByIndex(11)
            ]
    );
    tuple f = unsafe_tuple([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    int i = 63;

    repeat (64) {
        f = fq12_mul_tuple(fq12_mul_tuple(f, f), linefunc(R_x, R_y, R_x, R_y, P_x, P_y));
        (R_x, R_y) = double(R_x, R_y);

        if ((i == 63) | (i == 60) | (i == 59) | (i == 58) | (i == 56) |(i == 54) | (i == 53) | (i == 52) | (i == 51) | (i == 48) |
                (i == 46) | (i == 45) | (i == 44) |  (i == 37) |  (i == 36) | (i == 35) |
                (i == 32) |
                (i == 31) |
                (i == 29) |
                (i == 28) |
                (i == 27) |
                (i == 26) |
                (i == 25) |
                (i == 22) |
                (i == 21) |
                (i == 20) |
                (i == 18) |
                (i == 17) |
                (i == 13) |
                (i == 12) |
                (i == 11) |
                (i == 9) |
                (i == 8) |
                (i == 7) |
                (i == 5) |
                (i == 3)) {

            f = fq12_mul_tuple(f, linefunc(R_x, R_y, Q_x, Q_y, P_x, P_y));
            (R_x, R_y) = addition(R_x, R_y, Q_x, Q_y);
        }
        i -= 1;
    }
    tuple  Q1_x = fq12_exp(Q_x, _q);
    tuple Q1_y = fq12_exp(Q_y, _q);
    tuple nQ2_x = fq12_exp(Q1_x, _q);
    tuple nQ2_y = fq12_mul_coef_tuple(fq12_exp(Q1_y, _q), -1);
    f = fq12_mul_tuple(f, linefunc(R_x, R_y, Q1_x, Q1_y, P_x, P_y));
    (R_x, R_y) = addition(R_x, R_y, Q1_x, Q1_y);
    f = fq12_mul_tuple(f, linefunc(R_x, R_y, nQ2_x, nQ2_y, P_x, P_y));
    slice exponent = get_last_exponent();
    return calc_expo(f, exponent);
}

